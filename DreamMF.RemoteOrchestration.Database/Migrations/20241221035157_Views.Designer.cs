// <auto-generated />
using System;
using DreamMF.RemoteOrchestration.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DreamMF.RemoteOrchestration.Database.Migrations
{
    [DbContext(typeof(RemoteOrchestrationDbContext))]
    [Migration("20241221035157_Views")]
    partial class Views
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.5");

            modelBuilder.Entity("DreamMF.RemoteOrchestration.Database.Entities.AuditReads_Host", b =>
                {
                    b.Property<int>("AuditRead_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created_Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Host_ID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("User_ID")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuditRead_ID");

                    b.ToTable("AuditReads_Host", (string)null);
                });

            modelBuilder.Entity("DreamMF.RemoteOrchestration.Database.Entities.AuditReads_Remote", b =>
                {
                    b.Property<int>("AuditRead_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created_Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Remote_ID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("User_ID")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuditRead_ID");

                    b.ToTable("AuditReads_Remote", (string)null);
                });

            modelBuilder.Entity("DreamMF.RemoteOrchestration.Database.Entities.Audit_Host", b =>
                {
                    b.Property<int>("Audit_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Change")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Change_User_ID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Created_Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Host_ID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Audit_ID");

                    b.ToTable("Audit_Host", (string)null);
                });

            modelBuilder.Entity("DreamMF.RemoteOrchestration.Database.Entities.Audit_Remote", b =>
                {
                    b.Property<int>("Audit_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Change")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Change_User_ID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Created_Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Remote_ID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Audit_ID");

                    b.ToTable("Audit_Remote", (string)null);
                });

            modelBuilder.Entity("DreamMF.RemoteOrchestration.Database.Entities.Configuration", b =>
                {
                    b.Property<int>("Configuration_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Created_Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Updated_Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Configuration_ID");

                    b.ToTable("Configuration", (string)null);
                });

            modelBuilder.Entity("DreamMF.RemoteOrchestration.Database.Entities.DailyEntityAnalytics", b =>
                {
                    b.Property<int>("CreateCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeleteCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ReadCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("ReadDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalReads")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UpdateCount")
                        .HasColumnType("INTEGER");

                    b.ToTable((string)null);

                    b.ToView("v_DailyRemoteReads", (string)null);
                });

            modelBuilder.Entity("DreamMF.RemoteOrchestration.Database.Entities.EntityAnalytics", b =>
                {
                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Last30DaysActions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalCreates")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalDeletes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalReads")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalUpdates")
                        .HasColumnType("INTEGER");

                    b.ToTable((string)null);

                    b.ToView("v_HostReadAnalytics", (string)null);
                });

            modelBuilder.Entity("DreamMF.RemoteOrchestration.Database.Entities.Host", b =>
                {
                    b.Property<int>("Host_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Created_Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Environment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Updated_Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Host_ID");

                    b.ToTable("Host", (string)null);
                });

            modelBuilder.Entity("DreamMF.RemoteOrchestration.Database.Entities.Host_Remote", b =>
                {
                    b.Property<int>("Host_Remote_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Created_Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Host_ID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Remote_ID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Updated_Date")
                        .HasColumnType("TEXT");

                    b.HasKey("Host_Remote_ID");

                    b.HasIndex("Remote_ID");

                    b.ToTable("Host_Remote", (string)null);
                });

            modelBuilder.Entity("DreamMF.RemoteOrchestration.Database.Entities.Module", b =>
                {
                    b.Property<int>("Module_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Created_Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Updated_Date")
                        .HasColumnType("TEXT");

                    b.HasKey("Module_ID");

                    b.ToTable("Module", (string)null);
                });

            modelBuilder.Entity("DreamMF.RemoteOrchestration.Database.Entities.RecentRemoteAnalytics", b =>
                {
                    b.Property<int>("Last24HoursCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Last30DaysCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("QueryTime")
                        .HasColumnType("TEXT");

                    b.ToTable((string)null);

                    b.ToView("v_RecentRemoteAnalytics", (string)null);
                });

            modelBuilder.Entity("DreamMF.RemoteOrchestration.Database.Entities.Remote", b =>
                {
                    b.Property<int>("Remote_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Created_Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Updated_Date")
                        .HasColumnType("TEXT");

                    b.HasKey("Remote_ID");

                    b.ToTable("Remote", (string)null);
                });

            modelBuilder.Entity("DreamMF.RemoteOrchestration.Database.Entities.Tag", b =>
                {
                    b.Property<int>("Tag_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Created_Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Display_Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Updated_Date")
                        .HasColumnType("TEXT");

                    b.HasKey("Tag_ID");

                    b.ToTable("Tag", (string)null);
                });

            modelBuilder.Entity("DreamMF.RemoteOrchestration.Database.Entities.Tags_Host", b =>
                {
                    b.Property<int>("Tag_Host_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Created_Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Host_ID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Tag_ID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Updated_Date")
                        .HasColumnType("TEXT");

                    b.HasKey("Tag_Host_ID");

                    b.HasIndex("Host_ID");

                    b.HasIndex("Tag_ID");

                    b.ToTable("Tags_Hosts");
                });

            modelBuilder.Entity("DreamMF.RemoteOrchestration.Database.Entities.Tags_Remote", b =>
                {
                    b.Property<int>("Tag_Remote_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Created_Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Remote_ID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Tag_ID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Updated_Date")
                        .HasColumnType("TEXT");

                    b.HasKey("Tag_Remote_ID");

                    b.HasIndex("Remote_ID");

                    b.HasIndex("Tag_ID");

                    b.ToTable("Tags_Remote", (string)null);
                });

            modelBuilder.Entity("HostTag", b =>
                {
                    b.Property<int>("HostsHost_ID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagsTag_ID")
                        .HasColumnType("INTEGER");

                    b.HasKey("HostsHost_ID", "TagsTag_ID");

                    b.HasIndex("TagsTag_ID");

                    b.ToTable("HostTag");
                });

            modelBuilder.Entity("RemoteTag", b =>
                {
                    b.Property<int>("RemotesRemote_ID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagsTag_ID")
                        .HasColumnType("INTEGER");

                    b.HasKey("RemotesRemote_ID", "TagsTag_ID");

                    b.HasIndex("TagsTag_ID");

                    b.ToTable("RemoteTag");
                });

            modelBuilder.Entity("Remote_Module", b =>
                {
                    b.Property<int>("Remote_Module_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Created_Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Module_ID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Remote_ID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Updated_Date")
                        .HasColumnType("TEXT");

                    b.HasKey("Remote_Module_ID");

                    b.HasIndex("Module_ID");

                    b.HasIndex("Remote_ID");

                    b.ToTable("Remote_Module");
                });

            modelBuilder.Entity("DreamMF.RemoteOrchestration.Database.Entities.Host_Remote", b =>
                {
                    b.HasOne("DreamMF.RemoteOrchestration.Database.Entities.Remote", "Remote")
                        .WithMany()
                        .HasForeignKey("Remote_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Remote");
                });

            modelBuilder.Entity("DreamMF.RemoteOrchestration.Database.Entities.Tags_Host", b =>
                {
                    b.HasOne("DreamMF.RemoteOrchestration.Database.Entities.Host", "Host")
                        .WithMany()
                        .HasForeignKey("Host_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamMF.RemoteOrchestration.Database.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("Tag_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Host");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("DreamMF.RemoteOrchestration.Database.Entities.Tags_Remote", b =>
                {
                    b.HasOne("DreamMF.RemoteOrchestration.Database.Entities.Remote", "Remote")
                        .WithMany()
                        .HasForeignKey("Remote_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamMF.RemoteOrchestration.Database.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("Tag_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Remote");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("HostTag", b =>
                {
                    b.HasOne("DreamMF.RemoteOrchestration.Database.Entities.Host", null)
                        .WithMany()
                        .HasForeignKey("HostsHost_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamMF.RemoteOrchestration.Database.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTag_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RemoteTag", b =>
                {
                    b.HasOne("DreamMF.RemoteOrchestration.Database.Entities.Remote", null)
                        .WithMany()
                        .HasForeignKey("RemotesRemote_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamMF.RemoteOrchestration.Database.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTag_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Remote_Module", b =>
                {
                    b.HasOne("DreamMF.RemoteOrchestration.Database.Entities.Module", "Module")
                        .WithMany()
                        .HasForeignKey("Module_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamMF.RemoteOrchestration.Database.Entities.Remote", "Remote")
                        .WithMany()
                        .HasForeignKey("Remote_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Remote");
                });
#pragma warning restore 612, 618
        }
    }
}
